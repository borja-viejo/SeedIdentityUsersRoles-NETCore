// <auto-generated />
using System;
using BorjaSwimSchoolApp.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BorjaSwimSchoolApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220321031106_SeedRolesUsers")]
    partial class SeedRolesUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AlumnoSesion", b =>
                {
                    b.Property<int>("AlumnosAlumnoId")
                        .HasColumnType("int");

                    b.Property<int>("SesionesSesionId")
                        .HasColumnType("int");

                    b.HasKey("AlumnosAlumnoId", "SesionesSesionId");

                    b.HasIndex("SesionesSesionId");

                    b.ToTable("AlumnoSesion");
                });

            modelBuilder.Entity("BorjaSwimSchoolApp.Models.Alumno", b =>
                {
                    b.Property<int>("AlumnoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FxNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sexo")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AlumnoId");

                    b.HasIndex("UserId");

                    b.ToTable("Alumnos");

                    b.HasData(
                        new
                        {
                            AlumnoId = 1,
                            Apellido = "Flores",
                            FxNacimiento = new DateTime(1995, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Rosa",
                            Sexo = 1,
                            Telefono = "612345678",
                            UserId = "db553a60-377c-4edc-a4c3-3d9ad25eaf7e"
                        });
                });

            modelBuilder.Entity("BorjaSwimSchoolApp.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "3f0b726f-6907-4941-b0a2-0c549ce2db8f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b6de5c8b-4a67-4794-bee3-e9a4e86fce8a",
                            Email = "admin1@tajamar365.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@TAJAMAR365.COM",
                            NormalizedUserName = "ADMIN1@TAJAMAR365.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELgOrZD20CPf5++oGF7EmalDijaEVy4cOIOqtUEIFMNUXV+bMwAG79936dAKk/JuUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5ec63ad-6ce2-485b-b243-4f7126605f66",
                            TwoFactorEnabled = false,
                            UserName = "admin1@tajamar365.com"
                        },
                        new
                        {
                            Id = "8ec5cbb7-e1ed-4d23-a340-1f75d511f53e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5c2ba7d-8eba-488a-8d7b-11bf7a88fdec",
                            Email = "coach1@tajamar365.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "COACH1@TAJAMAR365.COM",
                            NormalizedUserName = "COACH1@TAJAMAR365.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEO3iwz9tMHBDgIw7fCJRdCcl2HO+/c8qvZHPzMEHsud+4C4SbJ9mvLX4/z0daLLMyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1834d07-064c-4d7d-bccb-25828ef18461",
                            TwoFactorEnabled = false,
                            UserName = "coach1@tajamar365.com"
                        },
                        new
                        {
                            Id = "db553a60-377c-4edc-a4c3-3d9ad25eaf7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8bb82e17-3d20-493c-a6d5-4476e931f624",
                            Email = "swimmer1@tajamar365.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SWIMMER1@TAJAMAR365.COM",
                            NormalizedUserName = "SWIMMER1@TAJAMAR365.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK4EY/F7uV1qSwJohc8ENQs2SMRt+0/YHVfoRN2ku/oWWjo2iNt1z8YzUtHyhO+vRg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "508193f2-6a8d-483c-9d87-094c7484b19c",
                            TwoFactorEnabled = false,
                            UserName = "swimmer1@tajamar365.com"
                        },
                        new
                        {
                            Id = "9fc551a2-634f-46cd-8439-f94239c25d28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b63bf9df-61c6-4eb1-ac0a-08525a68087b",
                            Email = "visitor1@tajamar365.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VISITOR1@TAJAMAR365.COM",
                            NormalizedUserName = "VISITOR1@TAJAMAR365.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBNbNsnYq6nY9UgX4m+Z3u5EUwcFlC1i1ghTiyV7GZtDNYg/4vbaIyX207b2NE5eoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "244e6530-b2df-4fd0-b8fe-65daa4f9688f",
                            TwoFactorEnabled = false,
                            UserName = "visitor1@tajamar365.com"
                        });
                });

            modelBuilder.Entity("BorjaSwimSchoolApp.Models.Curso", b =>
                {
                    b.Property<int>("CursoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntrenadorId")
                        .HasColumnType("int");

                    b.Property<int>("Nivel")
                        .HasColumnType("int");

                    b.HasKey("CursoId");

                    b.HasIndex("EntrenadorId");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("BorjaSwimSchoolApp.Models.Entrenador", b =>
                {
                    b.Property<int>("EntrenadorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EntrenadorId");

                    b.HasIndex("UserId");

                    b.ToTable("Entrenadores");

                    b.HasData(
                        new
                        {
                            EntrenadorId = 1,
                            Apellido = "Fernández",
                            Nombre = "Marta",
                            Telefono = "687654321",
                            UserId = "8ec5cbb7-e1ed-4d23-a340-1f75d511f53e"
                        });
                });

            modelBuilder.Entity("BorjaSwimSchoolApp.Models.Matricula", b =>
                {
                    b.Property<int>("MatriculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlumnoId")
                        .HasColumnType("int");

                    b.Property<int>("SesionId")
                        .HasColumnType("int");

                    b.HasKey("MatriculaId");

                    b.HasIndex("AlumnoId");

                    b.HasIndex("SesionId");

                    b.ToTable("Matriculas");
                });

            modelBuilder.Entity("BorjaSwimSchoolApp.Models.Sesion", b =>
                {
                    b.Property<int>("SesionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FxFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FxInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HoraInicio")
                        .HasColumnType("datetime2");

                    b.HasKey("SesionId");

                    b.HasIndex("CursoId");

                    b.ToTable("Sesiones");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "85ae456f-d97d-4dfc-b2af-cb5996194f95",
                            ConcurrencyStamp = "2a718c02-9c84-4e43-bbfe-570a7a5b7479",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "b2a24efa-39c6-46ed-827c-f49fae0e43d6",
                            ConcurrencyStamp = "d57f8051-0293-45ac-94ee-e8efc54cd487",
                            Name = "Coach",
                            NormalizedName = "COACH"
                        },
                        new
                        {
                            Id = "eb215a30-a5af-4e84-a7b9-17aa8de73e83",
                            ConcurrencyStamp = "48e93293-a0ee-4cd5-861f-2b76818b5dff",
                            Name = "Swimmer",
                            NormalizedName = "SWIMMER"
                        },
                        new
                        {
                            Id = "551f6a38-836b-4534-8a67-ac1798e1c04b",
                            ConcurrencyStamp = "8884d5d6-11f3-48a3-9fb9-1e8c71391bf1",
                            Name = "Visitor",
                            NormalizedName = "VISITOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "3f0b726f-6907-4941-b0a2-0c549ce2db8f",
                            RoleId = "85ae456f-d97d-4dfc-b2af-cb5996194f95"
                        },
                        new
                        {
                            UserId = "8ec5cbb7-e1ed-4d23-a340-1f75d511f53e",
                            RoleId = "b2a24efa-39c6-46ed-827c-f49fae0e43d6"
                        },
                        new
                        {
                            UserId = "db553a60-377c-4edc-a4c3-3d9ad25eaf7e",
                            RoleId = "eb215a30-a5af-4e84-a7b9-17aa8de73e83"
                        },
                        new
                        {
                            UserId = "9fc551a2-634f-46cd-8439-f94239c25d28",
                            RoleId = "551f6a38-836b-4534-8a67-ac1798e1c04b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AlumnoSesion", b =>
                {
                    b.HasOne("BorjaSwimSchoolApp.Models.Alumno", null)
                        .WithMany()
                        .HasForeignKey("AlumnosAlumnoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BorjaSwimSchoolApp.Models.Sesion", null)
                        .WithMany()
                        .HasForeignKey("SesionesSesionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BorjaSwimSchoolApp.Models.Alumno", b =>
                {
                    b.HasOne("BorjaSwimSchoolApp.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BorjaSwimSchoolApp.Models.Curso", b =>
                {
                    b.HasOne("BorjaSwimSchoolApp.Models.Entrenador", "Entrenador")
                        .WithMany("Cursos")
                        .HasForeignKey("EntrenadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entrenador");
                });

            modelBuilder.Entity("BorjaSwimSchoolApp.Models.Entrenador", b =>
                {
                    b.HasOne("BorjaSwimSchoolApp.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BorjaSwimSchoolApp.Models.Matricula", b =>
                {
                    b.HasOne("BorjaSwimSchoolApp.Models.Alumno", "Alumno")
                        .WithMany()
                        .HasForeignKey("AlumnoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BorjaSwimSchoolApp.Models.Sesion", "Sesion")
                        .WithMany()
                        .HasForeignKey("SesionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alumno");

                    b.Navigation("Sesion");
                });

            modelBuilder.Entity("BorjaSwimSchoolApp.Models.Sesion", b =>
                {
                    b.HasOne("BorjaSwimSchoolApp.Models.Curso", "Curso")
                        .WithMany("Sesiones")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BorjaSwimSchoolApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BorjaSwimSchoolApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BorjaSwimSchoolApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BorjaSwimSchoolApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BorjaSwimSchoolApp.Models.Curso", b =>
                {
                    b.Navigation("Sesiones");
                });

            modelBuilder.Entity("BorjaSwimSchoolApp.Models.Entrenador", b =>
                {
                    b.Navigation("Cursos");
                });
#pragma warning restore 612, 618
        }
    }
}
